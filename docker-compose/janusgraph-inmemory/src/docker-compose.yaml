# Copyright 2019 JanusGraph Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: '3.8'

services:

  # tag::janusgraph[]
  janusgraph:
    labels:
      sponsor: 'babeloff'
    image: '${dockerImage}:${dockerImageVersion}'
    container_name: jce-jg
    depends_on:
      - cassandra
      - elasticsearch
    # https://github.com/JanusGraph/janusgraph-docker/blob/master/README.md#docker-environment-variables
    environment:
      JG_SHOW: 'env server graphs scripts'
      JVM_OPTIONS:  '-Xms512m -Xmx512m'
      # tag::janusgraph_environment[]
      GREMLIN_TEMPLATE: 'gremlin-server-inmemory'
      JG_TEMPLATE: 'janusgraph-server'

      # http://tinkerpop.apache.org/javadocs/3.4.6/full/org/apache/tinkerpop/gremlin/server/Settings.html

      GREMLIN__scriptEvaluationTimeout: '.scriptEvaluationTimeout = 1200000'
      GREMLIN__threadPoolWorker: '.threadPoolWorker = 3'

      # the following allows the the server to serialize sub-graphs
      GREMLIN__tinkerIO: >-
        .serializers[] |=
        select(.className == "org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0'
           and .config.ioRegistries)
        .config.ioRegistries += ['org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerIoRegistryV3d0']

      # 2^20=1,048,576Bytes=1MiB , the default is 2^16=64KiB=65,536Bytes
      GREMLIN__maxContentLength: '.maxContentLength = 1048576'

      # configure the default graph
      GREMLIN__defaultGraph: '.graphs.graph = "/etc/opt/janusgraph/janusgraph-graph.properties"'

      JG__graph_storageHostname: '.storage.backend = "inmemory"'
      JG__graph_schemaDefault: '.schema.default = "none"'

      GREMLIN_GROOVY__graphTraversal: |
        def globals = [:]
        globals << [hook : [
          onStartUp: { ctx ->
            ctx.logger.info("Executed once at startup of Gremlin Server.")
          },
          onShutDown: { ctx ->
            ctx.logger.info("Executed once at shutdown of Gremlin Server.")
          }
        ] as LifeCycleHook]
        globals << [g : graph.traversal()]

      GREMLIN__mgmtGraphTraversal: >-
        .scriptEngines.gremlin-groovy.plugins.['org.apache.tinkerpop.gremlin.jsr223.ScriptFileGremlinPlugin']
        .files = ["/etc/opt/janusgraph/graphTraversal.groovy"]

      # end::janusgraph_environment[]
    ports:
      - '8182:8182'
    networks:
      - jg-network
    volumes:
      - type: volume
        source: 'jg-corpus-data'
        target: /opt/janusgraph/corpus
        read_only: true
      - type: volume
        source: 'jg-product-data'
        target: /opt/janusgraph/product
    healthcheck:
      test:
        - 'CMD'
        - 'bin/gremlin.sh'
        - '-e'
        - 'scripts/remote-connect.gremlin'
      interval: 10s
      timeout: 30s
      retries: 3
    # end::janusgraph[]


# https://docs.docker.com/compose/networking/
networks:
  jg-network:
    name: jg-network

# tag::volumes[]
volumes:
  jg-corpus-data: { external: true }
  jg-product-data: { external: true }
# end::volumes[]
