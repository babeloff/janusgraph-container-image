# Copyright 2019 JanusGraph Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: "3"

services:
  janusgraph:
    labels:
      edu.vanderbilt.isis.lab: "mesolab"
    #    image: docker.io/janusgraph/janusgraph:0.5.3
    build: ../janusgraph-docker2
    container_name: janusgraph-default
    ports:
      - "8182:8182"
    # The mounted volume only makes sense if JanusGraph is being run with the BerekeleyDB storage.
    volumes:
      - "janusgraph-default-data:/var/lib/janusgraph"
    environment:
      JG_SHOW: "env server graphs scripts"
      JVM_OPTIONS: "-Xms512m -Xmx512m"
      # tag::janusgraph_environment[]

      # http://tinkerpop.apache.org/javadocs/3.4.6/full/org/apache/tinkerpop/gremlin/server/Settings.html

      GREMLIN__scriptEvaluationTimeout: '.scriptEvaluationTimeout = 1200000'
      GREMLIN__threadPoolWorker: '.threadPoolWorker = 3'

      # the following allows the the server to serialize sub-graphs
      GREMLIN__tinkerIO: >-
        .serializers[] |=
        select(.className == "org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0"
           and .config.ioRegistries)
        .config.ioRegistries += ["org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerIoRegistryV3d0"]

      # 2^20=1,048,576Bytes=1MiB , the default is 2^16=64KiB=65,536Bytes
      GREMLIN__maxContentLength: '.maxContentLength = 1048576'

      # configure the default graph
      GREMLIN__defaultGraph: '.graphs.graph = "/etc/opt/janusgraph/janusgraph-graph.properties"'

      JG__graph_storageHostname: 'storage.hostname=jce-cql'
      JG__graph_indexSearchHostname: 'index.search.hostname=jce-es'
      JG__graph_storageBatchLoading: 'storage.batch-loading=true'
      JG__graph_schemaDefault: 'schema.default=none'

      # https://jointhegraph.github.io/articles/hosting-multiple-graphs-on-janusgraph/
      GREMLIN__channelizer: '.channelizer = "org.janusgraph.channelizers.JanusGraphWebSocketChannelizer"'
      GREMLIN__graphManager: '.graphManager = "org.janusgraph.graphdb.management.JanusGraphManager"'
      GREMLIN__mgmtGraph: '.graphs.ConfigurationManagementGraph = "/etc/opt/janusgraph/janusgraph-mgmtGraph.properties"'

      JG__mgmtGraph_gremlinGraph: 'gremlin.graph=org.janusgraph.core.ConfiguredGraphFactory'
      JG__mgmtGraph_graphName: 'graph.graphname=ConfigurationManagementGraph'
      JG__mgmtGraph_storageHostname: 'storage.hostname=jce-cql'
      JG__mgmtGraph_indexSearchHostname: 'index.search.hostname=jce-es'

      GREMLIN_GROOVY__mgmtGraphTraversal: |
        tcm = new HashMap();
        tcm.put("storage.backend", "cql");
        tcm.put("storage.hostname", "jce-cql");
        tcm.put("index.search.backend", "elasticsearch");
        tcm.put("index.search.hostname", "jce-es");
        globals << [tcm: tcm]

      GREMLIN__mgmtGraphTraversal: >-
        .scriptEngines.gremlin-groovy.plugins.["org.apache.tinkerpop.gremlin.jsr223.ScriptFileGremlinPlugin"]
        .files = ["scripts/empty-sample.groovy"]

# https://docs.docker.com/compose/networking/
networks:
  jg-network:
    name: jg-network

volumes:
  jg-corpus-data: { external: true }
  jg-product-data: { external: true }
