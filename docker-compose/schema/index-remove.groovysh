
/**
 *  Remove each index
 *
 *  (ixName, propName, modifier) = indexList[0]
 */; "title"
disableIndex = '''
indexList.forEach { ixName, propName, modifier ->
    mgmt = graph.openManagement()
    if (! mgmt.containsGraphIndex(ixName)) {
        mgmt.commit()
        return;
    }
    gindex = mgmt.getGraphIndex(ixName)
    mgmt.updateIndex(gindex, SchemaAction.DISABLE_INDEX).get()
    mgmt.commit()
    graph.tx().commit()
}; "disable index"
'''
:submit @disableIndex

/**
 *  Wait for the status of each index to change from ENABLED to DISABLED
 */; "wait for disable comment"
waitForDisable = '''
indexList.forEach { ixName, propName, modifier ->
    report = ManagementSystem.awaitGraphIndexStatus(graph, ixName).status(SchemaStatus.DISABLED).call()
}; "wait for disable"
'''
:submit @waitForDisable

/**
 *  Remove the index
 */; "remove the index comment"
removeIndex = '''
indexList.forEach { ixName, propName, modifier ->
    graph.tx().commit()
    mgmt = graph.openManagement()
    ix = mgmt.getGraphIndex(ixName)
    mgmt.updateIndex(ix, SchemaAction.REMOVE_INDEX)
    mgmt.commit()
    graph.tx().commit()
}; "remove the index"
'''
:submit @removeIndex

