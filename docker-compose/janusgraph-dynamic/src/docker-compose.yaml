# Copyright 2019 JanusGraph Authors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

version: '3.8'

services:

  # tag::janusgraph[]
  janusgraph:
    labels:
      sponsor: 'mesolab'
    image: '${dockerImage}:${dockerImageVersion}'
    container_name: jce-jg
    depends_on:
      - cassandra
      - elasticsearch
    # https://github.com/JanusGraph/janusgraph-docker/blob/master/README.md#docker-environment-variables
    environment:
      JG_SHOW: 'env server graphs scripts'
      JVM_OPTIONS:  '-Xms512m -Xmx512m'
      # tag::janusgraph_environment[]
      JG_SVC_TEMPLATE: 'janusgraph-server'
      JG_GRAPH_TEMPLATE: 'janusgraph-cql-es-graph'

      # http://tinkerpop.apache.org/javadocs/3.4.6/full/org/apache/tinkerpop/gremlin/server/Settings.html

      JG_SVC__evaluationTimeout: '.evaluationTimeout = 1200000'
      JG_SVC__threadPoolWorker: '.threadPoolWorker = 3'

      # the following allows the server to serialize sub-graphs
      JG_SVC__tinkerIO: >-
        .serializers[] |=
        select(.className == "org.apache.tinkerpop.gremlin.driver.ser.GryoMessageSerializerV3d0'
           and .config.ioRegistries)
        .config.ioRegistries += ['org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerIoRegistryV3d0']

      # 2^20=1,048,576Bytes=1MiB , the default is 2^16=64KiB=65,536Bytes
      JG_SVC__maxContentLength: '.maxContentLength = 1048576'

      # configure the default graph
      JG_SVC__defaultGraph: '.graphs.graph = "/etc/opt/janusgraph/janusgraph-graph.properties"'

      JG_GRAPH__graph_storageHostname: '.storage.hostname = "jce-cql"'
      JG_GRAPH__graph_indexSearchHostname: '.index.search.hostname = "jce-es"'
      JG_GRAPH__graph_storageBatchLoading: '.storage.batch-loading = "true"'

      JG_GRAPH__graph_schemaDefault: '.schema.default = "default"'
      JG_GRAPH__graph_schemaLogging: '.schema.logging = "true"'

      JG_GRAPH__graph_schemaConstraint: '.schema.constraints = "false"'
      JG_GRAPH__graph_storageTimeout: '.storage.connection-timeout = "20000"'
      JG_GRAPH__graph_metrics: 'metrics.enabled = "true"'

      # https://jointhegraph.github.io/articles/hosting-multiple-graphs-on-janusgraph/
      JG_SVC__channelizer: '.channelizer = "org.apache.tinkerpop.gremlin.server.channel.WebSocketChannelizer"'
      JG_SVC__graphManager: '.graphManager = "org.janusgraph.graphdb.management.JanusGraphManager"'
      JG_SVC__mgmtGraph: '.graphs.ConfigurationManagementGraph = "/etc/opt/janusgraph/janusgraph-mgmtGraph.properties"'

      JG_GRAPH__mgmtGraph_gremlinGraph: '.gremlin.graph = "org.janusgraph.core.ConfiguredGraphFactory"'
      JG_GRAPH__mgmtGraph_graphName: '.graph.graphname = "ConfigurationManagementGraph"'
      JG_GRAPH__mgmtGraph_storageHostname: '.storage.hostname = "jce-cql"'
      JG_GRAPH__mgmtGraph_indexSearchHostname: '.index.search.hostname = "jce-es"'

      JG_SCRIPT__mgmtGraphTraversal: |
        tcm = new HashMap();
        tcm.put('storage.backend', 'cql');
        tcm.put('storage.hostname', 'jce-cql');
        tcm.put('index.search.backend', 'elasticsearch');
        tcm.put('index.search.hostname', 'jce-es');
        globals << [tcm: tcm]

      JG_SVC__mgmtGraphTraversal: >-
        .scriptEngines.gremlin-groovy.plugins.['org.apache.tinkerpop.gremlin.jsr223.ScriptFileGremlinPlugin']
        .files = ['scripts/empty-sample.groovy']

      # end::janusgraph_environment[]
    ports:
      - '8182:8182'
    networks:
      - jg-network
      - jce-network
    volumes:
      - type: volume
        source: 'jg-corpus-data'
        target: /opt/janusgraph/corpus
        read_only: true
      - type: volume
        source: 'jg-product-data'
        target: /opt/janusgraph/product
    healthcheck:
      test: ['CMD', 'bin/gremlin.sh', '-e', 'scripts/remote-connect.gremlin']
      interval: 10s
      timeout: 30s
      retries: 3
    # end::janusgraph[]

  # https://hub.docker.com/_/cassandra
  # https://github.com/docker-library/cassandra
  # tag::cassandra[]
  cassandra:
    labels:
      sponsor: 'datastax'
    image: cassandra:3
    container_name: 'jce-cql'
    environment:
      JVM_OPTS:  '-Xms512m -Xmx512m'
      CASSANDRA_START_RPC: 'true'
      CASSANDRA_SEEDS: 'cassandra'
      CASSANDRA_PASSWORD_SEEDER: 'yes'
      CASSANDRA_PASSWORD: 'cassandra'
    ports:
      - '7000:7000'
      - '9042:9042'
      - '9160:9160'
    networks:
      - jce-network
    volumes:
      - type: volume
        source: 'jg-cql-data'
        target: '/var/lib/cassandra'
  # end::cassandra[]

  # tag::elasticsearch[]
  elasticsearch:
    labels:
      sponsor: 'elastic'
    image: docker.elastic.co/elasticsearch/elasticsearch:6.6.0
    container_name: jce-es
    environment:
      ES_JAVA_OPTS: '-Xms512m -Xmx512m'
      http.host: '0.0.0.0'
      network.host: '0.0.0.0'
      transport.host: '127.0.0.1'
      cluster.name: 'docker-cluster'
      xpack.security.enabled: 'false'
      discovery.zen.minimum_master_nodes: '1'
    ports:
      - '9200:9200'
      - '9300:9300'
    networks:
      - jce-network
    volumes:
      - type: volume
        source: 'jg-es-data'
        target: '/var/lib/elasticsearch'
    healthcheck:
      test: ['CMD-SHELL', 'curl --silent --fail localhost:9200/_cluster/health || exit 1']
      interval: 10s
      timeout: 10s
      retries: 3
    # end::elasticsearch[]


# https://docs.docker.com/compose/networking/
networks:
  jce-network:
    name: jce-network
  jg-network:
    name: jg-network

# tag::volumes[]
volumes:
  jg-corpus-data: { external: true }
  jg-product-data: { external: true }
  jg-cql-data: { external: true }
  jg-es-data: { external: true }
# end::volumes[]
